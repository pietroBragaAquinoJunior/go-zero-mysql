// Code generated by goctl. DO NOT EDIT.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	blocoNotasFieldNames          = builder.RawFieldNames(&BlocoNotas{})
	blocoNotasRows                = strings.Join(blocoNotasFieldNames, ",")
	blocoNotasRowsExpectAutoSet   = strings.Join(stringx.Remove(blocoNotasFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	blocoNotasRowsWithPlaceHolder = strings.Join(stringx.Remove(blocoNotasFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBlocoNotasIdPrefix = "cache:blocoNotas:id:"
)

type (
	blocoNotasModel interface {
		Insert(ctx context.Context, data *BlocoNotas) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*BlocoNotas, error)
		Update(ctx context.Context, data *BlocoNotas) error
		Delete(ctx context.Context, id string) error
	}

	defaultBlocoNotasModel struct {
		sqlc.CachedConn
		table string
	}

	BlocoNotas struct {
		Id        string `db:"id"`
		Titulo    string `db:"titulo"`
		Descricao string `db:"descricao"`
	}
)

func newBlocoNotasModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBlocoNotasModel {
	return &defaultBlocoNotasModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`bloco_notas`",
	}
}

func (m *defaultBlocoNotasModel) Delete(ctx context.Context, id string) error {
	blocoNotasIdKey := fmt.Sprintf("%s%v", cacheBlocoNotasIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, blocoNotasIdKey)
	return err
}

func (m *defaultBlocoNotasModel) FindOne(ctx context.Context, id string) (*BlocoNotas, error) {
	blocoNotasIdKey := fmt.Sprintf("%s%v", cacheBlocoNotasIdPrefix, id)
	var resp BlocoNotas
	err := m.QueryRowCtx(ctx, &resp, blocoNotasIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blocoNotasRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBlocoNotasModel) Insert(ctx context.Context, data *BlocoNotas) (sql.Result, error) {
	blocoNotasIdKey := fmt.Sprintf("%s%v", cacheBlocoNotasIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, blocoNotasRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Titulo, data.Descricao)
	}, blocoNotasIdKey)
	return ret, err
}

func (m *defaultBlocoNotasModel) Update(ctx context.Context, data *BlocoNotas) error {
	blocoNotasIdKey := fmt.Sprintf("%s%v", cacheBlocoNotasIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, blocoNotasRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Titulo, data.Descricao, data.Id)
	}, blocoNotasIdKey)
	return err
}

func (m *defaultBlocoNotasModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBlocoNotasIdPrefix, primary)
}

func (m *defaultBlocoNotasModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", blocoNotasRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBlocoNotasModel) tableName() string {
	return m.table
}
